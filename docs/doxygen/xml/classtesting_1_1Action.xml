<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classtesting_1_1Action" kind="class" language="C++" prot="public">
    <compoundname>testing::Action</compoundname>
    <innerclass refid="structtesting_1_1Action_1_1ActionAdapter" prot="private">testing::Action::ActionAdapter</innerclass>
    <innerclass refid="structtesting_1_1Action_1_1IgnoreArgs" prot="private">testing::Action::IgnoreArgs</innerclass>
    <templateparamlist>
      <param>
        <type>typename F</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classtesting_1_1Action_1ac2f429bb8477bfa553caa4f83529bc17" prot="private" static="no">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>std::is_constructible&lt; std::function&lt; F &gt;, G &gt;</type>
        <definition>using testing::Action&lt; F &gt;::IsCompatibleFunctor =  std::is_constructible&lt;std::function&lt;F&gt;, G&gt;</definition>
        <argsstring></argsstring>
        <name>IsCompatibleFunctor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jan/packages/elements/include/gmock/gmock-actions.h" line="453" column="3" bodyfile="/home/jan/packages/elements/include/gmock/gmock-actions.h" bodystart="453" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classtesting_1_1Action_1a9af08a21ad329331fde856cba9b6dea2" prot="public" static="no">
        <type><ref refid="structtesting_1_1internal_1_1Function" kindref="compound">internal::Function</ref>&lt; F &gt;::Result</type>
        <definition>typedef internal::Function&lt;F&gt;::Result testing::Action&lt; F &gt;::Result</definition>
        <argsstring></argsstring>
        <name>Result</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jan/packages/elements/include/gmock/gmock-actions.h" line="456" column="48" bodyfile="/home/jan/packages/elements/include/gmock/gmock-actions.h" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classtesting_1_1Action_1ae27fda510696a9294f991de5b1abfaf2" prot="public" static="no">
        <type><ref refid="structtesting_1_1internal_1_1Function" kindref="compound">internal::Function</ref>&lt; F &gt;::ArgumentTuple</type>
        <definition>typedef internal::Function&lt;F&gt;::ArgumentTuple testing::Action&lt; F &gt;::ArgumentTuple</definition>
        <argsstring></argsstring>
        <name>ArgumentTuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jan/packages/elements/include/gmock/gmock-actions.h" line="457" column="55" bodyfile="/home/jan/packages/elements/include/gmock/gmock-actions.h" bodystart="457" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtesting_1_1Action_1a62bc48ff11968b6e45d21c4b49f349fb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class Action</definition>
        <argsstring></argsstring>
        <name>Action</name>
        <param>
          <type><ref refid="classtesting_1_1Action" kindref="compound">Action</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jan/packages/elements/include/gmock/gmock-actions.h" line="503" column="3" bodyfile="/home/jan/packages/elements/include/gmock/gmock-actions.h" bodystart="503" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtesting_1_1Action_1a5ce57c7df0f0bd341380776a736db7f5" prot="private" static="no" mutable="no">
        <type>::std::function&lt; F &gt;</type>
        <definition>::std::function&lt;F&gt; testing::Action&lt; F &gt;::fun_</definition>
        <argsstring></argsstring>
        <name>fun_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jan/packages/elements/include/gmock/gmock-actions.h" line="526" column="19" bodyfile="/home/jan/packages/elements/include/gmock/gmock-actions.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtesting_1_1Action_1a967772922a39dd7098bee429d749f277" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>testing::Action&lt; F &gt;::Action</definition>
        <argsstring>()</argsstring>
        <name>Action</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jan/packages/elements/include/gmock/gmock-actions.h" line="461" column="3" bodyfile="/home/jan/packages/elements/include/gmock/gmock-actions.h" bodystart="461" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1Action_1a2f5924eb6c0113be8f226aa3630b2cc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;internal::disjunction&lt;          IsCompatibleFunctor&lt;G&gt;, std::is_constructible&lt;std::function&lt;Result()&gt;,                                                        G&gt;&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>testing::Action&lt; F &gt;::Action</definition>
        <argsstring>(G &amp;&amp;fun)</argsstring>
        <name>Action</name>
        <param>
          <type>G &amp;&amp;</type>
          <declname>fun</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jan/packages/elements/include/gmock/gmock-actions.h" line="471" column="3" bodyfile="/home/jan/packages/elements/include/gmock/gmock-actions.h" bodystart="471" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1Action_1a5ce44c673e3f91378777b954d88917cd" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>testing::Action&lt; F &gt;::Action</definition>
        <argsstring>(ActionInterface&lt; F &gt; *impl)</argsstring>
        <name>Action</name>
        <param>
          <type><ref refid="classtesting_1_1ActionInterface" kindref="compound">ActionInterface</ref>&lt; F &gt; *</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jan/packages/elements/include/gmock/gmock-actions.h" line="476" column="12" bodyfile="/home/jan/packages/elements/include/gmock/gmock-actions.h" bodystart="476" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1Action_1a806bacddaa1f1daf61f89674564bdf0f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Func</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>testing::Action&lt; F &gt;::Action</definition>
        <argsstring>(const Action&lt; Func &gt; &amp;action)</argsstring>
        <name>Action</name>
        <param>
          <type>const <ref refid="classtesting_1_1Action" kindref="compound">Action</ref>&lt; Func &gt; &amp;</type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jan/packages/elements/include/gmock/gmock-actions.h" line="483" column="12" bodyfile="/home/jan/packages/elements/include/gmock/gmock-actions.h" bodystart="483" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1Action_1a4468ca2ea5e9f7363271145992d09dba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool testing::Action&lt; F &gt;::IsDoDefault</definition>
        <argsstring>() const</argsstring>
        <name>IsDoDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jan/packages/elements/include/gmock/gmock-actions.h" line="486" column="8" bodyfile="/home/jan/packages/elements/include/gmock/gmock-actions.h" bodystart="486" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1Action_1a5489a68def1d82eb61df819eae52dc8f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Result</type>
        <definition>Result testing::Action&lt; F &gt;::Perform</definition>
        <argsstring>(ArgumentTuple args) const</argsstring>
        <name>Perform</name>
        <param>
          <type>ArgumentTuple</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jan/packages/elements/include/gmock/gmock-actions.h" line="494" column="10" bodyfile="/home/jan/packages/elements/include/gmock/gmock-actions.h" bodystart="494" bodyend="499"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtesting_1_1Action_1a260034951551974ae4d6f2549206954d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::Action&lt; F &gt;::Init</definition>
        <argsstring>(G &amp;&amp;g, ::std::true_type)</argsstring>
        <name>Init</name>
        <param>
          <type>G &amp;&amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>::std::true_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jan/packages/elements/include/gmock/gmock-actions.h" line="506" column="8" bodyfile="/home/jan/packages/elements/include/gmock/gmock-actions.h" bodystart="506" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="classtesting_1_1Action_1a508db67a4feb6231b4af7ba8ee7a60b8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename G</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void testing::Action&lt; F &gt;::Init</definition>
        <argsstring>(G &amp;&amp;g, ::std::false_type)</argsstring>
        <name>Init</name>
        <param>
          <type>G &amp;&amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>::std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jan/packages/elements/include/gmock/gmock-actions.h" line="511" column="8" bodyfile="/home/jan/packages/elements/include/gmock/gmock-actions.h" bodystart="511" bodyend="513"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/jan/packages/elements/include/gmock/gmock-actions.h" line="438" column="1" bodyfile="/home/jan/packages/elements/include/gmock/gmock-actions.h" bodystart="438" bodyend="527"/>
    <listofallmembers>
      <member refid="classtesting_1_1Action_1a62bc48ff11968b6e45d21c4b49f349fb" prot="private" virt="non-virtual"><scope>testing::Action</scope><name>Action</name></member>
      <member refid="classtesting_1_1Action_1a967772922a39dd7098bee429d749f277" prot="public" virt="non-virtual"><scope>testing::Action</scope><name>Action</name></member>
      <member refid="classtesting_1_1Action_1a2f5924eb6c0113be8f226aa3630b2cc2" prot="public" virt="non-virtual"><scope>testing::Action</scope><name>Action</name></member>
      <member refid="classtesting_1_1Action_1a5ce44c673e3f91378777b954d88917cd" prot="public" virt="non-virtual"><scope>testing::Action</scope><name>Action</name></member>
      <member refid="classtesting_1_1Action_1a806bacddaa1f1daf61f89674564bdf0f" prot="public" virt="non-virtual"><scope>testing::Action</scope><name>Action</name></member>
      <member refid="classtesting_1_1Action_1ae27fda510696a9294f991de5b1abfaf2" prot="public" virt="non-virtual"><scope>testing::Action</scope><name>ArgumentTuple</name></member>
      <member refid="classtesting_1_1Action_1a5ce57c7df0f0bd341380776a736db7f5" prot="private" virt="non-virtual"><scope>testing::Action</scope><name>fun_</name></member>
      <member refid="classtesting_1_1Action_1a260034951551974ae4d6f2549206954d" prot="private" virt="non-virtual"><scope>testing::Action</scope><name>Init</name></member>
      <member refid="classtesting_1_1Action_1a508db67a4feb6231b4af7ba8ee7a60b8" prot="private" virt="non-virtual"><scope>testing::Action</scope><name>Init</name></member>
      <member refid="classtesting_1_1Action_1ac2f429bb8477bfa553caa4f83529bc17" prot="private" virt="non-virtual"><scope>testing::Action</scope><name>IsCompatibleFunctor</name></member>
      <member refid="classtesting_1_1Action_1a4468ca2ea5e9f7363271145992d09dba" prot="public" virt="non-virtual"><scope>testing::Action</scope><name>IsDoDefault</name></member>
      <member refid="classtesting_1_1Action_1a5489a68def1d82eb61df819eae52dc8f" prot="public" virt="non-virtual"><scope>testing::Action</scope><name>Perform</name></member>
      <member refid="classtesting_1_1Action_1a9af08a21ad329331fde856cba9b6dea2" prot="public" virt="non-virtual"><scope>testing::Action</scope><name>Result</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
